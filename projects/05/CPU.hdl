// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
//Decode
Mux(a=false,b=instruction[0],sel=instruction[15],out=j3);
Mux(a=false,b=instruction[1],sel=instruction[15],out=j2);
Mux(a=false,b=instruction[2],sel=instruction[15],out=j1);
Mux(a=false,b=instruction[3],sel=instruction[15],out=d3);
Mux(a=false,b=instruction[4],sel=instruction[15],out=d2);
Mux(a=false,b=instruction[5],sel=instruction[15],out=d1);
Mux(a=false,b=instruction[12],sel=instruction[15],out=a);

//A Register
Mux16(a=instruction,b=L1,sel=instruction[15],out=N1);
Not(in=instruction[15],out=M1);
Or(a=M1,b=d1,out=M2);
ARegister(in=N1,load=M2,out=N3);
And16(a=true,b=N3,out[0..14]=addressM);

//ALU
Mux16(a=N3,b=inM,sel=a,out=N2);
ALU(x=L2,y=N2,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=L1,zr=L3,ng=L4);
//RegisterD
DRegister(in=L1,load=d2,out=L2);
And16(a=true,b=L1,out=outM);
And(a=true,b=d3,out=writeM);

//PC
Not(in=L4,out=L5);
Mux(a=false,b=L3,sel=j2,out=K1);
Mux(a=false,b=L4,sel=j1,out=K2);
Mux(a=L5,b=false,sel=L3,out=Z1);
Mux(a=false,b=Z1,sel=j3,out=K3);
Or(a=K1,b=K2,out=K4);
Or(a=K3,b=K4,out=K5);
PC(in=N3,reset=reset,load=K5,inc=true,out[0..14]=pc);

	

}